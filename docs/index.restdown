---
title: Provisioner Documentation
markdown2extras: wiki-tables, code-friendly
apisections:
---

# Overview

Provisioner chiefly operates over AMQP, but some effort has been put into
making tasks as transport agnostic as possible.

When the main process starts up, it connects to AMQP. It will then create
queues on which it will receive messages. Each queue can handle one or more
tasks, where type may be something like `machine_create`, `machine_reboot`,
etc. Each queue is given a upper limit of tasks to be concurrently
executed.  

Provisioner chiefly operates over AMQP, but some effort has been put into
making tasks as transport agnostic as possible.


# Provisioner Messages

*Note*: ${var} denotes you should substitue that value with something
meaningful.


## Incoming messages

To start a new task send a message to this routing key:

    ${agent}.${node_uuid}.task.${task}

Payload:

    {
        task_id: 'my_unique_task_id',
        client_id:  'my_unique_client_id'
    }

Keys:

`task_id`:

> A unique id to relate this request to any tasks, events and steps.

`client_id`:

> A unique id that will identify the initiator of the task. This is
> used in outgoing messages we wish the sender to get, so they can bind a
> routing key to a queue ahead of time.


## Outgoing

### Steps

Step messages indicate the entry/exit of a task step. If an event's name is
prefixed with start: or end: it means it was a step and the event name after
the colon (:) was the name of the step.

    provisioner.${node_uuid}.event.start:prec_check.${client_id}.${task_id}
    provisioner.${node_uuid}.event.end:prec_check.${client_id}.${task_id}
    provisioner.${node_uuid}.event.start:ensure_dataset_present.${client_id}.${task_id}
    provisioner.${node_uuid}.event.end:ensure_dataset_present.${client_id}.${task_id}


### Events

Events messages indicate may milestone in a task, or that something has
happened. This might be that a certain % progress has been reached, that we
have started or finished a step, or something that doesn't necessarily correlate to the entry or exit of a step.

    provisioner.${node_uuid}.event.screenshot.${client_id}.${task_id}


### Progress

Indicates from 0-100 how far along this task is, with 0 being just started and
100 being finished.

    provisioner.${node_uuid}.event.progress.${client_id}.${task_id}

## Sample Interaction

This is what a request to provision a VM on a compute node might look like.

Tasks begin with a request originating from a "client". Tasks end when the
agent sends a "finish" event.

E.g. for the `machine_create` task, it might look like this:

    --> provisiner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.task.machine_create

    {
        client_id:  '5699633f',
        task_id: '11999575',

        <vm parameters>
    }

Provisioner indicates it has started the task:

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start.5699633f.11999575
    {}

Provisioner begins to execute steps and emit progress events:

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
    { value: 0 }

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start:pre_check.5699633f.11999575
    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.end:pre_check.5699633f.11999575

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
    { value: 20 }

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start:ensure_dataset_present.5699633f.11999575
    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.end:ensure_dataset_present.5699633f.11999575

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
    { value: 30 }

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start:fetch_dataset.5699633f.11999575
    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.end:fetch_dataset.5699633f.11999575

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
    { value: 50 }

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start:create_machine.5699633f.11999575
    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.end:create_machine.5699633f.11999575

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
    { value: 100 }

Finally the `finish` event message is sent.

    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.finish.5699633f.11999575
    {
        <result parameters>
    }

# Tasks

# Machine Tasks

## Machine Create (machine_create)
## Machine Destroy (machine_destroy)
## Machine Boot (machine_boot)
## Machine Shutdown (machine_shutdown)
## Machine Reboot (machine_reboot)


# ZFS Tasks

## ZFS Dataset Clone (zfs_clone_dataset)
## ZFS Dataset Create (zfs_create_dataset)
## ZFS Dataset Destroy (zfs_destroy_dataset)
## ZFS Dataset Properties Get (zfs_get_properties)
## ZFS Dataset Properties Set(zfs_set_properties)
## ZFS Dataset List (zfs_list_datasets)
## ZFS Dataset Rename (zfs_rename_dataset)
## ZFS Dataset Rollback (zfs_rollback_dataset)
## ZFS Dataset Snapshot (zfs_snapshot_dataset)
## ZFS Pool List (zfs_list_pools.js)

## Metering Tasks
